name: Publish
permissions: write-all

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  publish:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Install and build and package
        run: |
          python3 -m pip install setuptools
          npm install
          npm run postinstall
          npm run build
          npm run package
      - name: python version
        run:
          RAW_version_name="${{ github.ref_name }}"
          version_name=$(echo $RAW_version_name | sed 's/\v//')
          echo "version_name=$version_name" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/build/kubelinkr-${{ env.version_name }}.dmg
          asset_name: kubelinkr-${{ env.version_name }}.dmg
          asset_content_type: application/dmg


